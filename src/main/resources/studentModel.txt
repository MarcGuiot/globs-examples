httpServerRegister.register("/api/model", null)
        .get(null, (body, pathParameters, queryParameters) -> {
            return CompletableFuture.completedFuture(Model.TYPE.instantiate()
                    .set(Model.dbTypes,
                            Stream.of(DbStudentType.TYPE, DbClassType.TYPE, DbProfessorType.TYPE).map(GSonUtils::encodeGlobType)
                                    .toArray(String[]::new))
                    .set(Model.graphqlTypes, GSonUtils.encodeGlobType(SchemaType.TYPE))
            );
        });


public static class DbClassType {
    @DbTableName_("classes")
    public static GlobType TYPE;

    @KeyField_
    public static StringField uuid;

    @Searchable_
    public static StringField name;

    public static StringField principalProfessorUUID;

    static {
        GlobTypeLoaderFactory.create(DbClassType.class, "class").load();
    }
}

public static class DbProfessorType {
    @DbTableName_("professors")
    public static GlobType TYPE;

    @KeyField_
    public static StringField uuid;

    @Searchable_
    public static StringField firstName;

    @Searchable_
    public static StringField lastName;

    static {
        GlobTypeLoaderFactory.create(DbProfessorType.class, "professor").load();
    }
}

public static class DbStudentType {
    @DbTableName_("students")
    public static GlobType TYPE;

    @KeyField_
    public static StringField uuid;

    @Searchable_
    public static StringField firstName;

    @Searchable_
    public static StringField lastName;

    public static StringField mainClassUUID;

    static {
        GlobTypeLoaderFactory.create(DbStudentType.class, "student").load();
    }
}

public static class SchemaType {
    public static GlobType TYPE;

    @Target(QueryType.class)
    public static GlobField query;

    static {
        GlobTypeLoaderFactory.create(SchemaType.class).load();
    }
}

public static class QueryType {
    public static GlobType TYPE;

    @GQLQueryParam_(SearchQuery.class)
    @Target(GQLProfessor.class)
    public static GlobArrayField professors;

    @GQLQueryParam_(SearchQuery.class)
    @Target(GQLClass.class)
    @FieldName_("classes")
    public static GlobArrayField classes;

    @GQLQueryParam_(SearchQuery.class)
    @Target(GQLStudent.class)
    public static GlobArrayField students;

    @GQLQueryParam_(EntityQuery.class)
    @Target(GQLProfessor.class)
    public static GlobField professor;

    @GQLQueryParam_(EntityQuery.class)
    @Target(GQLClass.class)
    @FieldName_("class")
    public static GlobField class_;

    @GQLQueryParam_(EntityQuery.class)
    @Target(GQLStudent.class)
    public static GlobField student;

    static {
        GlobTypeLoaderFactory.create(QueryType.class).load();
    }
}

public static class GQLClass {
    @DbTarget_(DbClassType.class)
    public static GlobType TYPE;

    public static StringField uuid;

    public static StringField name;

    @Target(GQLProfessor.class)
    @Link_(from = "principalProfessorUUID", to = "uuid")
    public static GlobField principalProfessor;

    @Target(StudentConnection.class)
    @GQLQueryParam_(Parameter.class)
    @Link_(from = "uuid", to = "mainClassUUID")
    public static GlobField students;

    static {
        GlobTypeLoaderFactory.create(GQLClass.class).load();
    }
}

public static class GQLStudent {
    @DbTarget_(DbStudentType.class)
    public static GlobType TYPE;

    public static StringField uuid;

    public static StringField firstName;

    public static StringField lastName;

    @Target(GQLClass.class)
    @FieldName_("class")
    @Link_(from = "mainClassUUID", to = "uuid")
    public static GlobField class_;

    static {
        GlobTypeLoaderFactory.create(GQLStudent.class).load();
    }
}

public static class GQLProfessor {
    @DbTarget_(DbProfessorType.class)
    public static GlobType TYPE;

    public static StringField uuid;

    public static StringField firstName;

    public static StringField lastName;

    @Target(GQLClass.class)
    @Link_(from = "uuid", to = "principalProfessorUUID")
    public static GlobArrayField mainClasses;

    static {
        GlobTypeLoaderFactory.create(GQLProfessor.class).load();
    }
}

public static class StudentConnection {
    public static GlobType TYPE;

    public static IntegerField totalCount;

    @Target(StudentHedge.class)
    public static GlobArrayField edges;

    @Target(GQLPageInfo.class)
    @GQLMandatory_
    public static GlobField pageInfo;

    static {
        GlobTypeLoaderFactory.create(StudentConnection.class).load();
    }
}

public static class StudentHedge {
    public static GlobType TYPE;

    @Target(GQLStudent.class)
    public static GlobField node;

    static {
        GlobTypeLoaderFactory.create(StudentHedge.class).load();
    }
}
